"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeUpgradeProxy = exports.makePrepareUpgrade = void 0;
const upgrades_core_1 = require("@openzeppelin/upgrades-core");
const proxy_factory_1 = require("./proxy-factory");
const validations_1 = require("./validations");
const deploy_1 = require("./utils/deploy");
async function prepareUpgradeImpl(hre, manifest, proxyAddress, ImplFactory, opts) {
    const { provider } = hre.network;
    const validations = await validations_1.readValidations(hre);
    const unlinkedBytecode = upgrades_core_1.getUnlinkedBytecode(validations, ImplFactory.bytecode);
    const version = upgrades_core_1.getVersion(unlinkedBytecode, ImplFactory.bytecode);
    upgrades_core_1.assertUpgradeSafe(validations, version, opts);
    const currentImplAddress = await upgrades_core_1.getImplementationAddress(provider, proxyAddress);
    const deploymentLayout = await upgrades_core_1.getStorageLayoutForAddress(manifest, validations, currentImplAddress);
    const layout = upgrades_core_1.getStorageLayout(validations, version);
    upgrades_core_1.assertStorageUpgradeSafe(deploymentLayout, layout, opts.unsafeAllowCustomTypes);
    return await upgrades_core_1.fetchOrDeploy(version, provider, async () => {
        const deployment = await deploy_1.deploy(ImplFactory);
        return { ...deployment, layout };
    });
}
function makePrepareUpgrade(hre) {
    return async function prepareUpgrade(proxyAddress, ImplFactory, opts = {}) {
        const { provider } = hre.network;
        const manifest = await upgrades_core_1.Manifest.forNetwork(provider);
        return await prepareUpgradeImpl(hre, manifest, proxyAddress, ImplFactory, opts);
    };
}
exports.makePrepareUpgrade = makePrepareUpgrade;
function makeUpgradeProxy(hre) {
    return async function upgradeProxy(proxyAddress, ImplFactory, opts = {}) {
        const { provider } = hre.network;
        const manifest = await upgrades_core_1.Manifest.forNetwork(provider);
        const AdminFactory = await proxy_factory_1.getProxyAdminFactory(hre, ImplFactory.signer);
        const admin = AdminFactory.attach(await upgrades_core_1.getAdminAddress(provider, proxyAddress));
        const manifestAdmin = await manifest.getAdmin();
        if (admin.address !== (manifestAdmin === null || manifestAdmin === void 0 ? void 0 : manifestAdmin.address)) {
            throw new Error('Proxy admin is not the one registered in the network manifest');
        }
        const nextImpl = await prepareUpgradeImpl(hre, manifest, proxyAddress, ImplFactory, opts);
        await admin.upgrade(proxyAddress, nextImpl);
        return ImplFactory.attach(proxyAddress);
    };
}
exports.makeUpgradeProxy = makeUpgradeProxy;
//# sourceMappingURL=upgrade-proxy.js.map