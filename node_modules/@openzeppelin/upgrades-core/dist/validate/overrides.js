"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSilencingWarnings = exports.silenceWarnings = exports.processExceptions = exports.withValidationDefaults = exports.ValidationErrorUnsafeMessages = void 0;
const chalk_1 = __importDefault(require("chalk"));
exports.ValidationErrorUnsafeMessages = {
    'state-variable-assignment': `    You are using the \`unsafeAllow.state-variable-assignment\` flag.\n`,
    'state-variable-immutable': `    You are using the \`unsafeAllow.state-variable-immutable\` flag.\n`,
    'external-library-linking': `    You are using the \`unsafeAllow.external-library-linking\` flag to include external libraries.\n` +
        `    Make sure you have manually checked that the linked libraries are upgrade safe.\n`,
    'struct-definition': `    You are using the \`unsafeAllow.struct-definition\` flag to skip storage checks for structs.\n` +
        `    Make sure you have manually checked the storage layout for incompatibilities.\n`,
    'enum-definition': `    You are using the \`unsafeAllow.enum-definition\` flag to skip storage checks for enums.\n` +
        `    Make sure you have manually checked the storage layout for incompatibilities.\n`,
    constructor: `    You are using the \`unsafeAllow.constructor\` flag.\n`,
    delegatecall: `    You are using the \`unsafeAllow.delegatecall\` flag.\n`,
    selfdestruct: `    You are using the \`unsafeAllow.selfdestruct\` flag.\n`,
};
function withValidationDefaults(opts) {
    var _a, _b, _c;
    const unsafeAllow = (_a = opts.unsafeAllow) !== null && _a !== void 0 ? _a : [];
    const unsafeAllowCustomTypes = (_b = opts.unsafeAllowCustomTypes) !== null && _b !== void 0 ? _b : (unsafeAllow.includes('struct-definition') && unsafeAllow.includes('enum-definition'));
    const unsafeAllowLinkedLibraries = (_c = opts.unsafeAllowLinkedLibraries) !== null && _c !== void 0 ? _c : unsafeAllow.includes('external-library-linking');
    if (unsafeAllowCustomTypes) {
        unsafeAllow.push('enum-definition', 'struct-definition');
    }
    if (unsafeAllowLinkedLibraries) {
        unsafeAllow.push('external-library-linking');
    }
    return { unsafeAllowCustomTypes, unsafeAllowLinkedLibraries, unsafeAllow };
}
exports.withValidationDefaults = withValidationDefaults;
function processExceptions(contractName, errors, opts) {
    const { unsafeAllow } = withValidationDefaults(opts);
    for (const [errorType, errorDescription] of Object.entries(exports.ValidationErrorUnsafeMessages)) {
        if (unsafeAllow.includes(errorType)) {
            let exceptionsFound = false;
            errors = errors.filter(error => {
                const isException = errorType === error.kind;
                exceptionsFound = exceptionsFound || isException;
                return !isException;
            });
            if (exceptionsFound && !silenced && errorDescription) {
                console.error(chalk_1.default.keyword('orange').bold('Warning: ') +
                    `Potentially unsafe deployment of ${contractName}\n\n` +
                    errorDescription);
            }
        }
    }
    return errors;
}
exports.processExceptions = processExceptions;
let silenced = false;
function silenceWarnings() {
    if (!silenced) {
        console.error(chalk_1.default.keyword('orange').bold('Warning:') +
            ` All subsequent Upgrades warnings will be silenced.\n\n` +
            `    Make sure you have manually checked all uses of unsafe flags.\n`);
        silenced = true;
    }
}
exports.silenceWarnings = silenceWarnings;
function isSilencingWarnings() {
    return silenced;
}
exports.isSilencingWarnings = isSilencingWarnings;
//# sourceMappingURL=overrides.js.map